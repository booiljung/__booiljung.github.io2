ROS2 Humble, MID360과 FAST_LIVO로 만드는 자율주행 로봇

### 1. ROS2 Humble의 개요
- ROS2와 ROS1의 주요 차이점
- Humble Hawksbill의 특징 및 설치 방법
- ROS2의 네트워크 통신 구조
- DDS와 QoS 설정 이해
- ROS2의 패키지 구조와 워크스페이스 설정

### 2. MID360 LiDAR의 이해
- MID360의 하드웨어 개요 및 주요 사양
- MID360의 데이터 수집 방식
- LiDAR의 스캔 패턴과 자율주행에서의 활용
- MID360의 ROS2 드라이버 설정
- 데이터 필터링 및 전처리 방법

### 3. FAST-LIVO를 활용한 자율주행
- FAST-LIVO 개요: 특징 및 적용 분야
- Visual-Inertial Odometry(VIO)의 이론적 배경
- FAST-LIVO와 ROS2 연동하기
- 카메라-IMU 캘리브레이션 절차
- SLAM을 이용한 지도 작성 및 위치 추정

### 4. 자율주행 로봇 플랫폼의 구축
- 로봇 하드웨어 구성 요소 소개
- 센서와 액추에이터의 연결 및 설정
- ROS2 기반 로봇 제어 아키텍처
- ROS2 컨트롤러 설정 및 드라이브 시스템 구성
- 전원 관리 및 배터리 모니터링

### 5. 환경 인식 및 맵핑
- LiDAR와 카메라 데이터를 이용한 환경 인식
- PointCloud2 메시지의 이해와 활용
- Octomap을 이용한 3D 맵핑
- SLAM 기법을 통한 지도 작성
- 환경 변화에 대응하는 동적 맵 업데이트

### 6. 경로 계획 및 네비게이션
- 자율주행 경로 계획의 개요
- ROS2 Nav2 스택 설정 및 활용
- 글로벌 및 로컬 경로 계획
- 장애물 회피 알고리즘
- 미로 환경에서의 경로 탐색 및 최적화

### 7. 자율주행 로봇의 위치 추정
- LiDAR 기반 위치 추정의 기본 개념
- FAST-LIVO와 LiDAR 융합을 통한 정밀 위치 추정
- IMU 데이터를 활용한 위치 안정화
- AMCL (Adaptive Monte Carlo Localization)의 이해
- 복합 센서 퓨전 기법을 통한 정밀 위치 추정

### 8. 센서 데이터 처리 및 통합
- LiDAR, IMU, 카메라 데이터의 통합
- ROS2의 메시지 타입 및 토픽 활용
- Sensor Fusion을 위한 Kalman Filter와 EKF의 이해
- ROS2의 tf2 프레임워크 활용
- 데이터 싱크 문제 해결과 타임스탬프 관리

### 9. 자율주행 로봇의 모션 제어
- 모션 제어의 기본 개념과 kinematics
- ROS2 컨트롤러를 이용한 모터 제어
- Differential Drive 및 Ackermann Steering 모델
- 경로 추종 알고리즘 (Pure Pursuit, Stanley Method)
- 실시간 속도 제어 및 제어기 튜닝 방법

### 10. 객체 탐지 및 회피
- LiDAR와 카메라를 이용한 객체 탐지
- YOLO와 같은 딥러닝 기반 객체 탐지 모델 활용
- 장애물 탐지와 경로 계획 통합
- 정적 및 동적 장애물 회피 알고리즘
- 객체 인식 후 대응 전략 설정

### 11. 통신 및 원격 제어
- ROS2를 이용한 원격 모니터링 및 제어
- DDS를 통한 실시간 데이터 전송
- ROS2 웹 툴을 이용한 원격 대시보드 설정
- WiFi와 LTE를 통한 네트워크 설정
- 로봇 상태 모니터링 및 오류 처리

### 12. 시뮬레이션을 통한 테스트
- Gazebo를 이용한 자율주행 로봇 시뮬레이션
- ROS2와 Gazebo의 통합 설정
- 자율주행 알고리즘의 가상 환경 테스트
- 시뮬레이션을 통한 데이터 수집 및 검증
- 현실과 시뮬레이션 간 차이점 및 교정 방법
### 13. 자율주행 로봇의 소프트웨어 아키텍처
- ROS2 기반 소프트웨어 아키텍처 설계
- 노드와 노드 간의 상호작용 이해
- 메시지 패싱과 서비스 호출의 구조
- 액션 서버/클라이언트의 활용
- 분산 시스템에서의 ROS2 아키텍처 확장

### 14. 실시간 데이터 처리와 동기화
- 실시간 데이터 처리의 중요성
- MID360 LiDAR 데이터의 실시간 스트리밍
- Sensor Synchronization 및 Time Synchronization 문제
- FAST-LIVO의 실시간 처리 및 연산 최적화
- Edge Computing을 이용한 실시간 데이터 분석

### 15. 자율주행 알고리즘의 최적화
- 경로 계획 및 네비게이션 최적화
- SLAM의 성능 최적화를 위한 파라미터 튜닝
- 센서 데이터 처리의 연산 속도 향상 방법
- 리소스 제약 환경에서의 최적화 기법
- ROS2 패키지 최적화를 통한 시스템 성능 향상

### 16. FAST-LIVO의 심화 활용
- FAST-LIVO 알고리즘의 핵심 요소 분석
- ORB와 FAST Feature Detector의 비교 및 적용
- VIO 데이터와 LiDAR 데이터의 퓨전 전략
- FAST-LIVO의 매개변수 조정 및 튜닝
- 고속 환경 변화에서의 위치 추정 성능 테스트

### 17. 자율주행 시스템의 디버깅 및 테스트
- ROS2의 로깅 및 디버깅 도구 활용
- rqt 및 rviz를 이용한 데이터 시각화 및 모니터링
- 자율주행 모듈의 단계별 테스트 방법
- 로깅된 데이터의 재생 및 분석
- 디버깅을 위한 가상 환경 구축

### 18. 자율주행 로봇의 안전성 고려
- 자율주행의 안전성 문제 개요
- 센서 고장 및 데이터 신뢰성 평가
- 장애물 인식 실패에 대한 대처 방법
- 비상 정지 시스템 구현
- ROS2의 오류 처리 및 예외 상황 대응 방법

### 19. 실제 환경에서의 자율주행 테스트
- 실내 및 실외 환경에서의 테스트 전략
- MID360을 이용한 지도 작성 및 데이터 수집
- 다양한 주행 조건에서의 자율주행 테스트
- 현장 테스트 시 고려사항 및 안전 규칙
- 테스트 결과의 분석 및 개선 방안 도출

### 20. 자율주행 프로젝트의 통합
- 자율주행 로봇의 하드웨어 및 소프트웨어 통합 과정
- MID360, FAST-LIVO, 그리고 ROS2의 협력적 통합
- 각 모듈 간 인터페이스 설정 및 테스트
- 시스템 통합 테스트 및 성능 평가
- 통합 과정에서의 문제 해결 및 최적화

### 21. ROS2를 활용한 데이터 기록 및 분석
- rosbag2를 이용한 데이터 기록 및 재생
- MID360 및 FAST-LIVO 데이터를 활용한 분석
- 데이터의 전처리 및 필터링 기법
- Python을 이용한 기록 데이터의 시각화 및 분석
- 분석 결과를 기반으로 한 시스템 개선

### 22. 자율주행 로봇의 네비게이션 튜닝
- 네비게이션 스택 파라미터 튜닝
- Local Planner 및 Global Planner의 최적화
- 회피 기동과 장애물 주행 성능 개선
- PID 제어기 튜닝을 통한 주행 안정성 향상
- 실제 주행 데이터 기반 네비게이션 성능 향상

### 23. 자율주행의 유지보수 및 관리
- 소프트웨어 업데이트와 관리 전략
- ROS2 패키지 의존성 관리
- 하드웨어 유지보수: 센서 및 액추에이터 점검
- LiDAR와 카메라 캘리브레이션 유지
- 시스템 로그 및 상태 모니터링을 통한 예방적 유지보수

### 24. 사용자 인터페이스 및 시각화
- ROS2와 웹 인터페이스를 통한 원격 조작
- rviz와 rqt를 이용한 실시간 시각화 설정
- 사용자 맞춤형 대시보드 제작
- 데이터 시각화를 통한 시스템 이해도 향상
- ROS2의 Node 상태 모니터링 도구 활용

### 25. MID360과 FAST-LIVO의 제한점 및 대처 방안
- MID360의 범위 및 정확도 한계 분석
- FAST-LIVO의 약점과 데이터 수집 환경의 중요성
- 센서 노이즈와 오차의 원인 분석
- 시스템 한계를 극복하기 위한 보완적 센서 활용
- 다양한 환경에서의 자율주행을 위한 설정 최적화

### 26. 프로젝트 배포 및 확장
- 자율주행 로봇의 ROS2 패키지 배포
- Docker를 이용한 개발 환경 컨테이너화
- 현장 설치 및 초기 설정 가이드라인
- 프로젝트의 확장 가능성 및 새로운 기능 통합
- 커뮤니티와 협업을 통한 오픈소스 프로젝트 기여 방법

### 27. 프로젝트 마무리 및 향후 발전 방향
- 프로젝트 완료 후의 검토 사항
- 시스템 성능 평가 및 피드백 수집
- 향후 발전 가능한 기술 요소
- FAST-LIVO와 LiDAR의 발전 가능성
- 다음 단계로의 발전: 고급 자율주행 기능 탐색
